{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"S3K Game Overview","text":""},{"location":"#overview-of-the-game","title":"Overview of the Game","text":"<p>S3K Game is a game that involves one person (Mr Peanut) against three enemies. The code base for this game was given for better improvement. This documentation gives a detail of new features that were added by SK3 group to better improve the overall experience of the users of this game. The Snapses of code and the explanation of the accompanying features are discussed in this documentation.</p>"},{"location":"#introduction-to-the-code-inherited","title":"Introduction to the code inherited:","text":"<p>The base code was inherited from the CSC 532 class. It was programed in C# and window forms were also used for its implementation. These codes were arranged into Frm battle, Frm level, Frm battle designers, Resource and program files. Each file corresponds to either a window form or performs a particular function. Additional file called Bdg Track was created for the background track or music.</p>"},{"location":"Features/","title":"Technical Documentation for Additional Features","text":""},{"location":"Features/#faq-feature","title":"FAQ Feature:","text":"<p>This feature was added to the Frm battle file. It was created in frm battle design It involves creating a feature named FAQ. The frequently asked questions features helps gives answers to some of the questions that may bother the users. It is activated when the user clicks the FAQ button. Just like most FAQ features will take you to the website of the game, this feature takes you to another page where the possibble questions and answers are located through the link provided. After creating the botton, its charateristics were specified and then the link that represents the link to the game's website where the FAQ were answered was added. The feature currently works well with the base code and there is no error caused by it.</p>"},{"location":"Features/#faq-codeblock","title":"FAQ codeblock","text":"<p>A codeblock for the FAQ Feature is as described below:</p> <p><pre><code> private void btnHelp_Click(object sender, EventArgs e)\n {\n     //Help\n     string documentationUrl = \"https://docs.google.com/document/d/158qKBqjiTSbWiRfbgNZ-8zu_gsyhuzam8IXES70mpeU/edit\"; // link to google docs FAQ\n     System.Diagnostics.Process.Start(documentationUrl);\n }\n</code></pre> Since a button was created for the FAQ feature, the code below represent the generated code for window form <pre><code>     private System.Windows.Forms.Button btnHelp;//Button help design\n</code></pre></p>"},{"location":"Features/#background-music-feature","title":"Background Music Feature:","text":"<p>This feature was a seperate file named Bgd Track.cs . It is meant to play until there is a hit and also continue to play if the game continues. The sound track was first added to the resources. The method for the music was created separately as a .cs file. This was then linked to the other files when they call the method since they are all in the same folder.</p>"},{"location":"Features/#background-music-codeblock","title":"Background Music Codeblock","text":"<p>A codeblock for the background music:</p> <p><pre><code>    public static class BgdTrack\n    {\n        public static SoundPlayer bgdTrackPlayer;\n        private static bool isBackgroundTrackPlaying = false;\n\n        static BgdTrack()\n        {\n            // Initialize the background music player\n            bgdTrackPlayer = new SoundPlayer(Resources.AssassinsCreed2); // Name of choice track in the Resources is used\n        }\n        public static void PlayBackgroundTrack()\n        {\n            if (bgdTrackPlayer != null &amp;&amp; !isBackgroundTrackPlaying)\n            {\n                bgdTrackPlayer.PlayLooping();\n                isBackgroundTrackPlaying = true;\n            }\n        }\n        public static void StopBackgroundTrack()\n        {\n            if (bgdTrackPlayer != null &amp;&amp; isBackgroundTrackPlaying)\n            {\n                bgdTrackPlayer.Stop();\n                isBackgroundTrackPlaying = false;\n            }\n        }\n    }\n</code></pre> The code section below calls the Bgd Track.cs from the FrmBattle.cs and stops the music</p> <p><pre><code>public void SetupForBossBattle() {\n  picBossBattle.Location = Point.Empty;\n  picBossBattle.Size = ClientSize;\n  picBossBattle.Visible = true;\n  BgdTrack.StopBackgroundTrack();//Calling the background music to stop so that the bus_battle sound intro can play\n\n        SoundPlayer simpleSound = new SoundPlayer(Resources.final_battle);\n  simpleSound.Play();\n\n  tmrFinalBattle.Enabled = true;\n}\n</code></pre> The code section below calls the Bgd Track.cs from the FrmBattle.cs and re-starts the music</p> <pre><code>private void tmrFinalBattle_Tick(object sender, EventArgs e) {\n  picBossBattle.Visible = false;\n  tmrFinalBattle.Enabled = false;\n        BgdTrack.PlayBackgroundTrack();//Calling the background music to start again\n    }\n</code></pre>"},{"location":"Features/#escape-button-feature","title":"Escape button Feature","text":"<p>Escape button Feature: This Feature is added to the FrmBattle.cs file. It is activated when the user click the Escape button in \u201cFight!\u201d dialog box and turn back to the level. This feature allow users to flee from a battle and keep the current player\u2019s and enemy\u2019s status. The feature currently works well with the base code and there is no error caused by it.</p>"},{"location":"Features/#escape-button-code-block","title":"Escape button code block","text":"<p>The code block of the Escape button is as described below</p> <pre><code>private void btnEscape_Click(object sender, EventArgs e){\n        instance = null;\n        Close();\n\n}\n</code></pre> <p>The code block of the Escape button in FrmBattle.Designer.cs is as described below <pre><code>this.btnEscape = new System.Windows.Forms.Button();\nthis.btnEscape.Font = new System.Drawing.Font(\"Microsoft Sans Serif\", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\nthis.btnEscape.Location = new System.Drawing.Point(180, 637);\nthis.btnEscape.Margin = new System.Windows.Forms.Padding(4);\nthis.btnEscape.Name = \"btnEscape\";\nthis.btnEscape.Size = new System.Drawing.Size(192, 60);\nthis.btnEscape.TabIndex = 2;\nthis.btnEscape.Text = \"Escape\";\nthis.btnEscape.UseVisualStyleBackColor = true;\nthis.btnEscape.Click += new System.EventHandler(this.btnEscape_Click);\n</code></pre></p>"},{"location":"Features/#attack-audio-feature","title":"Attack audio feature:","text":"<p>Introduction: The attack audio feature elevates the user's interaction with the application by introducing an audio, in the form of a \"booom\" sound effect, When a user initiates an attack, an auditory \"boom\" sound effect enhances the user experience</p> <p>when the user initiates an attack action during the game. </p>"},{"location":"Features/#code-walkthrough-for-attack-feature","title":"Code Walkthrough for Attack Feature:","text":"<p>A plain codeblock:</p> <pre><code>private void btnAttack_Click(object sender, EventArgs e) {\n    // Starting of audio playback for attack\n    SoundPlayer attack_audio = new SoundPlayer(Resources.boom);\n    player.OnAttack(-4);\n\n    if (enemy.Health &gt; 0) {\n        // Playback of the attack audio\n        attack_audio.Play();\n        enemy.OnAttack(-2);\n    }\n    UpdateHealthBars();\n    if (player.Health &lt;= 0 || enemy.Health &lt;= 0) {\n        instance = null;\n        Close();\n        // Termination of the attack audio when no longer necessary\n        attack_audio.Stop();\n    }\n}\n</code></pre> <p>Code in the Resources.Designer.cs </p> <pre><code>internal static System.IO.UnmanagedMemoryStream boom {\n    get {\n        return ResourceManager.GetStream(\"boom\", resourceCulture);\n    }\n}\n</code></pre>"},{"location":"Features/#enemy-vanishing-feature","title":"Enemy Vanishing Feature","text":"<p>Introduction: The enemy vanishing feature helps the user in understanding which enemy he has killed after the attack. It makes the enemies disappear. The feature is functioning smoothly within the existing code, and it does not introduce any errors or issues. It Called the method \"Enemy_vanishing\" in the \"Fight\" method. It Created a new method \"Enemy_vanishing\" added functionality that makes the enemy disappear in the battle feild. Did this in the FrmLevel.cs This feature makes defeated enemies disappear from the screen so players can see which enemies they've defeated more easily.</p>"},{"location":"Features/#code-walkthrough-for-enemy-vanishing-feature","title":"Code Walkthrough for Enemy Vanishing Feature:","text":"<pre><code>private void Fight(Enemy enemy) {\n   player.ResetMoveSpeed();\n   player.MoveBack();\n   frmBattle = FrmBattle.GetInstance(enemy);\n   frmBattle.Show();\n\n   if (enemy == bossKoolaid) {\n     frmBattle.SetupForBossBattle();\n   }\n         Enemy_vanishing(enemy); //calling the method here\n     }\n     private void Enemy_vanishing(Enemy enemy)\n       //This method handles the disappearance of enemy graphics from the user interface upon their defeat.\n     {\n         if (enemy == enemyPoisonPacket)\n         {\n             picEnemyPoisonPacket.Visible = false;\n         }\n         else if (enemy == bossKoolaid &amp;&amp; enemy.Health == 0)\n         {\n             picBossKoolAid.Visible = false;\n         }\n         else if (enemy == enemyCheeto)\n         {\n             picEnemyCheeto.Visible = false;\n         }\n     }\n</code></pre>"},{"location":"Features/#weapon-item-feature","title":"Weapon item feature:","text":"<p>This feature modified the code in FrmLevel.cs, FrmLevel.Designer.cs and FrmBattle.cs files and created a new file Weapon.cs. There will be a knife image on the level, when player hit the image, the image disappears, which means the player has picked up the knife as a weapon. After that, the attack damage of player doubles in battles. The feature currently works well with the base code and there is no error caused by it.</p>"},{"location":"Features/#weapon-feature-code-block","title":"Weapon feature code block","text":"<p>The code block of the Weapon Feature in FrmLevel.cs is as described below</p> <pre><code>public Weapon weapon;\npublic static bool haveAWeapon;\nprivate void FrmLevel_Load(object sender, EventArgs e) {\n  const int PADDING = 8;\n  const int NUM_WALLS = 13;\n\n  player = new Player(CreatePosition(picPlayer), CreateCollider(picPlayer, PADDING));\n  bossKoolaid = new Enemy(CreatePosition(picBossKoolAid), CreateCollider(picBossKoolAid, PADDING));\n  enemyPoisonPacket = new Enemy(CreatePosition(picEnemyPoisonPacket), CreateCollider(picEnemyPoisonPacket, PADDING));\n  enemyCheeto = new Enemy(CreatePosition(picEnemyCheeto), CreateCollider(picEnemyCheeto, PADDING));\n\n  //weapon = new Weapon(CreatePosition(knife), CreateCollider(knife, PADDING));\n\n  bossKoolaid.Img = picBossKoolAid.BackgroundImage;\n  enemyPoisonPacket.Img = picEnemyPoisonPacket.BackgroundImage;\n  enemyCheeto.Img = picEnemyCheeto.BackgroundImage;\n\n  bossKoolaid.Color = Color.Red;\n  enemyPoisonPacket.Color = Color.Green;\n  enemyCheeto.Color = Color.FromArgb(255, 245, 161);\n\n  walls = new Character[NUM_WALLS];\n  for (int w = 0; w &lt; NUM_WALLS; w++) {\n    PictureBox pic = Controls.Find(\"picWall\" + w.ToString(), true)[0] as PictureBox;\n    walls[w] = new Character(CreatePosition(pic), CreateCollider(pic, PADDING));\n  }\n\n  Game.player = player;\n  timeBegin = DateTime.Now;\n}\n  if (HitAWeapon(player))\n        {          \n            knife.Visible = false;\n            haveAWeapon = true;             \n        }\n}\nprivate bool HitAWeapon(Character c)\n    {\n        bool hitAWeapon = false;\n        if (c.Collider.Intersects(weapon.Collider))\n        {\n            hitAWeapon = true;\n\n        }\n        return hitAWeapon;\n    }\n</code></pre> <p>The code block of the Weapon Feature  in FrmLevel.Designer.cs is as described below Some <code>code</code> goes here.</p> <p><pre><code>this.knife = new System.Windows.Forms.PictureBox();\n((System.ComponentModel.ISupportInitialize)(this.knife)).BeginInit();\nthis.knife.BackColor = System.Drawing.Color.Transparent;\nthis.knife.BackgroundImage = global::Fall2020_CSC403_Project.Properties.Resources.knife;\nthis.knife.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;\nthis.knife.Location = new System.Drawing.Point(797, 244);\nthis.knife.Margin = new System.Windows.Forms.Padding(4);\nthis.knife.Name = \"knife\";\nthis.knife.Size = new System.Drawing.Size(81, 84);\nthis.knife.TabIndex = 0;\nthis.knife.TabStop = false;\nthis.Controls.Add(this.knife);\n((System.ComponentModel.ISupportInitialize)(this.knife)).EndInit();\n</code></pre> The code block of the Weapon feature in FrmBattle.cs is as described below</p> <pre><code>private void btnAttack_Click(object sender, EventArgs e) {\n  bool checkweapon = FrmLevel.haveAWeapon;\n  if (checkweapon)\n      {\n          player.playerOnAttack(-8);\n      }\n      else {  \n          player.playerOnAttack(-4);\n      }\n\n\n\n\nif (enemy.Health &gt; 0) {\n  enemy.enemyOnAttack(-2);\n}\n\nUpdateHealthBars();\nif (player.Health &lt;= 0 || enemy.Health &lt;= 0) {\n  instance = null;\n  Close();\n}\n}\n</code></pre>"},{"location":"Features/#game-over-feature","title":"Game Over Feature:","text":"<p>This feature is added to Form GameOver file. It was cerated in Form GameOver design. It Involves creating a Text and making it displayed. This doalog pop's - up when the player or the enemy dies. It is useful as we can exit from the game after the death of the player or the enemy. I used window forms and a text tool to make this festure. I made sone editing in the text and some changes for font, size, alingnment and the color for this feature. The feature works well with the base code as of now and they are no errors caused by it.</p>"},{"location":"Features/#creating-a-gameover-dialog-pop-up","title":"Creating a GameOver dialog pop - up","text":"<pre><code>public static int KillEnemy = 0;\n\nUpdateHealthBars();\n    if (enemy.Health &lt;= 0)\n    {\n        instance = null;\n        KillEnemy++;\n        Close();\n        if(KillEnemy == 3)\n        {\n            gameover = Gameover.GetInstance();\n            gameover.Show();\n        }\n    }\n    if(player.Health &lt;= 0)\n    {\n        instance = null;\n        Close();\n        gameover = Gameover.GetInstance();\n        gameover.Show();\n    }\n</code></pre>"},{"location":"Features/#restart-feature","title":"Restart Feature:","text":"<p>This feature is added to Form GameOver file. It was created in Form GaveOver design. It involves creating a button and making it functional. It is very helpful as we can restart the game after completing once or after the player dies. I used window forms and a button tool to create this feature. I made some changes regarding the font, size and color for this feature to make it look presentable. The feature works well with the base code as of now and they are no errors caused by it.</p>"},{"location":"Features/#creating-a-restart-button","title":"Creating a restart button","text":"<pre><code>private void Restart_Click(object sender, EventArgs e)\n{\n    Application.Restart();\n}\n</code></pre>"},{"location":"Features/#conclusion","title":"Conclusion","text":"<p>So far, all the added features are good and there is no code break caused by the features.</p>"}]}